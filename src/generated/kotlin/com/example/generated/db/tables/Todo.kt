/*
 * This file is generated by jOOQ.
 */
package com.example.generated.db.tables


import com.example.generated.db.Public
import com.example.generated.db.keys.TODO_PKEY
import com.example.generated.db.tables.records.TodoRecord

import java.time.Instant
import java.util.UUID

import kotlin.collections.Collection

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * Temporary table to verify integration test functionality. Delete before
 * deploying to a real environment.
 */
@Suppress("warnings")
open class Todo(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, TodoRecord>?,
    parentPath: InverseForeignKey<out Record, TodoRecord>?,
    aliased: Table<TodoRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<TodoRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment("Temporary table to verify integration test functionality. Delete before deploying to a real environment."),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.todo</code>
         */
        val TODO: Todo = Todo()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<TodoRecord> = TodoRecord::class.java

    /**
     * The column <code>public.todo.id</code>. The unique id (Primary Key) for
     * this table.
     */
    val ID: TableField<TodoRecord, UUID?> = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("gen_random_uuid()"), SQLDataType.UUID)), this, "The unique id (Primary Key) for this table.")

    /**
     * The column <code>public.todo.name</code>. The name for the todo record.
     */
    val NAME: TableField<TodoRecord, String?> = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "The name for the todo record.")

    /**
     * The column <code>public.todo.completed_at</code>. The time the todo was
     * marked as completed.
     */
    val COMPLETED_AT: TableField<TodoRecord, Instant?> = createField(DSL.name("completed_at"), SQLDataType.INSTANT, this, "The time the todo was marked as completed.")

    /**
     * The column <code>public.todo.created_at</code>. The date / time that this
     * record was created.
     */
    val CREATED_AT: TableField<TodoRecord, Instant?> = createField(DSL.name("created_at"), SQLDataType.INSTANT.nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.INSTANT)), this, "The date / time that this record was created.")

    /**
     * The column <code>public.todo.modified_at</code>. The date / time that
     * this record was last modified.
     */
    val MODIFIED_AT: TableField<TodoRecord, Instant?> = createField(DSL.name("modified_at"), SQLDataType.INSTANT.nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.INSTANT)), this, "The date / time that this record was last modified.")

    private constructor(alias: Name, aliased: Table<TodoRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<TodoRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<TodoRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>public.todo</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.todo</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.todo</code> table reference
     */
    constructor(): this(DSL.name("todo"), null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getPrimaryKey(): UniqueKey<TodoRecord> = TODO_PKEY
    override fun `as`(alias: String): Todo = Todo(DSL.name(alias), this)
    override fun `as`(alias: Name): Todo = Todo(alias, this)
    override fun `as`(alias: Table<*>): Todo = Todo(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Todo = Todo(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Todo = Todo(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Todo = Todo(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Todo = Todo(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Todo = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Todo = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Todo = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Todo = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Todo = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Todo = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Todo = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Todo = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Todo = where(DSL.notExists(select))
}
