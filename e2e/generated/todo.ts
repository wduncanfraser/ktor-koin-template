/**
 * Automatically generated by @grafana/openapi-to-k6: 0.3.2
 * Do not edit manually.
 * Todo
 * Todo API for Ktor Template
 * Service version: 0.1.0
 */
import { URL, URLSearchParams } from "https://jslib.k6.io/url/1.0.0/index.js";

import http from "k6/http";
import type { Params, Response } from "k6/http";

/**
 * RFC 9457 compliant error response
 */
export interface ProblemDetails {
  /** URI reference identifying the problem type. */
  type: string;
  /** A short, human-readable summary of the problem type. */
  title: string;
  /** HTTP status code for this error occurrence. */
  status: number;
  /** Explanation specific to this occurrence of the problem. */
  detail: string;
  /** URI reference identifying the specific occurrence of the problem. */
  instance: string;
}

/**
 * Paginated Results with metadata describing the page
 */
export interface PaginationMetadata {
  page: number;
  pageSize: number;
  totalPages: number;
  totalRows: number;
}

/**
 * A todo item.
 */
export interface TodoResponse {
  id: string;
  name: TodoName;
  /** Is the Todo completed. */
  completed: boolean;
  /** Date and time when the Todo was marked completed. */
  completedAt?: string;
  createdAt: CreatedAt;
  updatedAt: UpdatedAt;
}

export interface CreateTodoRequest {
  name: TodoName;
}

export interface UpdateTodoRequest {
  name: TodoName;
  /** Is the Todo completed. */
  completed: boolean;
}

/**
 * The name of the Todo.
 * @minLength 1
 */
export type TodoName = string;

/**
 * Date and time which is set automatically when the resource is created.
 */
export type CreatedAt = string;

/**
 * Date and time which updates automatically when the resource is updated.
 */
export type UpdatedAt = string;

/**
 * Bad Request.
 */
export type BadRequestResponse = ProblemDetails;

/**
 * An unexpected error occurred when processing the request.
 */
export type UnexpectedErrorResponse = ProblemDetails;

/**
 * The specified resource was not found
 */
export type NotFoundResponse = ProblemDetails;

export type ListTodosResponseResponse = {
  data: TodoResponse[];
  pagination: PaginationMetadata;
};

/**
 * The number of items to return in a single request.
 */
export type PageSizeParameter = number;

/**
 * The page number of results to return.
 */
export type PageNumberParameter = number;

/**
 * Filter for todos to only list completed vs incomplete records.
 */
export type CompletedParameter = boolean;

export type ListTodosParams = {
  /**
   * The number of items to return in a single request.
   * @minimum 1
   * @maximum 100
   */
  pageSize?: PageSizeParameter;
  /**
   * The page number of results to return.
   * @minimum 1
   */
  page?: PageNumberParameter;
  /**
   * Filter for todos to only list completed vs incomplete records.
   */
  completed?: CompletedParameter;
};

/**
 * This is the base client to use for interacting with the API.
 */
export class TodoClient {
  private cleanBaseUrl: string;
  private commonRequestParameters: Params;

  constructor(clientOptions: {
    baseUrl: string;
    commonRequestParameters?: Params;
  }) {
    this.cleanBaseUrl = clientOptions.baseUrl.replace(/\/+$/, "");

    this.commonRequestParameters = clientOptions.commonRequestParameters || {};
  }

  /**
   * @summary List all todos
   */
  listTodos(
    params?: ListTodosParams,
    requestParameters?: Params,
  ): {
    response: Response;
    data: ListTodosResponseResponse;
  } {
    const url = new URL(
      this.cleanBaseUrl +
        `/todos` +
        `?${new URLSearchParams(params).toString()}`,
    );
    const mergedRequestParameters = this._mergeRequestParameters(
      requestParameters || {},
      this.commonRequestParameters,
    );
    const response = http.request("GET", url.toString(), undefined, {
      ...mergedRequestParameters,
    });
    let data;

    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  /**
   * @summary Create a todo
   */
  createTodo(
    createTodoRequest: CreateTodoRequest,
    requestParameters?: Params,
  ): {
    response: Response;
    data: TodoResponse;
  } {
    const url = new URL(this.cleanBaseUrl + `/todos`);
    const mergedRequestParameters = this._mergeRequestParameters(
      requestParameters || {},
      this.commonRequestParameters,
    );
    const response = http.request(
      "POST",
      url.toString(),
      JSON.stringify(createTodoRequest),
      {
        ...mergedRequestParameters,
        headers: {
          ...mergedRequestParameters?.headers,
          "Content-Type": "application/json",
        },
      },
    );
    let data;

    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  /**
   * @summary Update a todo
   */
  updateTodo(
    todoId: string,
    updateTodoRequest: UpdateTodoRequest,
    requestParameters?: Params,
  ): {
    response: Response;
    data: TodoResponse;
  } {
    const url = new URL(this.cleanBaseUrl + `/todos/${todoId}`);
    const mergedRequestParameters = this._mergeRequestParameters(
      requestParameters || {},
      this.commonRequestParameters,
    );
    const response = http.request(
      "PUT",
      url.toString(),
      JSON.stringify(updateTodoRequest),
      {
        ...mergedRequestParameters,
        headers: {
          ...mergedRequestParameters?.headers,
          "Content-Type": "application/json",
        },
      },
    );
    let data;

    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  /**
   * @summary Delete a todo
   */
  deleteTodo(
    todoId: string,
    requestParameters?: Params,
  ): {
    response: Response;
    data: void;
  } {
    const url = new URL(this.cleanBaseUrl + `/todos/${todoId}`);
    const mergedRequestParameters = this._mergeRequestParameters(
      requestParameters || {},
      this.commonRequestParameters,
    );
    const response = http.request(
      "DELETE",
      url.toString(),
      undefined,
      mergedRequestParameters,
    );
    let data;

    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  /**
   * Merges the provided request parameters with default parameters for the client.
   *
   * @param {Params} requestParameters - The parameters provided specifically for the request
   * @param {Params} commonRequestParameters - Common parameters for all requests
   * @returns {Params} - The merged parameters
   */
  private _mergeRequestParameters(
    requestParameters?: Params,
    commonRequestParameters?: Params,
  ): Params {
    return {
      ...commonRequestParameters, // Default to common parameters
      ...requestParameters, // Override with request-specific parameters
      headers: {
        ...(commonRequestParameters?.headers || {}), // Ensure headers are defined
        ...(requestParameters?.headers || {}),
      },
      cookies: {
        ...(commonRequestParameters?.cookies || {}), // Ensure cookies are defined
        ...(requestParameters?.cookies || {}),
      },
      tags: {
        ...(commonRequestParameters?.tags || {}), // Ensure tags are defined
        ...(requestParameters?.tags || {}),
      },
    };
  }
}
